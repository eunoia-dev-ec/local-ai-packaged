volumes:
  n8n_storage:
  caddy-data:
  caddy-config:
  valkey-data:
  evolution_store:
  evolution_instances:

x-n8n: &service-n8n
  image: n8nio/n8n:latest
  environment:
    - DB_TYPE=postgresdb
    - DB_POSTGRESDB_HOST=db
    - DB_POSTGRESDB_USER=postgres
    - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
    - DB_POSTGRESDB_DATABASE=postgres
    - N8N_DIAGNOSTICS_ENABLED=false
    - N8N_PERSONALIZATION_ENABLED=false
    - N8N_ENCRYPTION_KEY
    - N8N_USER_MANAGEMENT_JWT_SECRET
    - WEBHOOK_URL=${N8N_HOSTNAME:+https://}${N8N_HOSTNAME:-http://localhost:5678}
    - EVOLUTION_API_HOST=${EVOLUTION_API_HOST:-http://evolution-api:8080}
    - EVOLUTION_API_KEY=${EVOLUTION_API_KEY:-your-api-key}

services:
  n8n-import:
    <<: *service-n8n
    container_name: n8n-import
    entrypoint: /bin/sh
    command:
      - "-c"
      - "n8n import:credentials --separate --input=/backup/credentials && n8n import:workflow --separate --input=/backup/workflows"
    volumes:
      - ./n8n/backup:/backup  

  n8n:
    <<: *service-n8n
    container_name: n8n
    restart: unless-stopped
    ports:
      - 5678:5678
    volumes:
      - n8n_storage:/home/node/.n8n
      - ./n8n/backup:/backup
      - ./shared:/data/shared
    depends_on:
      n8n-import:
        condition: service_completed_successfully

  caddy:
    container_name: caddy
    image: docker.io/library/caddy:2-alpine
    network_mode: host
    restart: unless-stopped
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy-data:/data:rw
      - caddy-config:/config:rw
    environment:
      - N8N_HOSTNAME=${N8N_HOSTNAME:-":8001"}
      - SUPABASE_HOSTNAME=${SUPABASE_HOSTNAME:-":8005"}
      - EVOLUTION_API_HOSTNAME=${EVOLUTION_API_HOSTNAME:-":8008"}
      - LETSENCRYPT_EMAIL=${LETSENCRYPT_EMAIL:-internal}
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    logging:
      driver: "json-file"
      options:
        max-size: "1m"
        max-file: "1"

  redis:
    container_name: redis
    image: docker.io/valkey/valkey:8-alpine
    command: valkey-server --save 30 1 --loglevel warning
    restart: unless-stopped  
    ports:
      - 6379:6379
    volumes:
      - valkey-data:/data
    cap_drop:
      - ALL
    cap_add:
      - SETGID
      - SETUID
      - DAC_OVERRIDE
    logging:
      driver: "json-file"
      options:
        max-size: "1m"
        max-file: "1"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 3s
      timeout: 10s
      retries: 10

  evolution-api:
    container_name: evolution-api
    image: atendai/evolution-api:latest
    restart: always
    ports:
      - 8080:8080
    environment:
      # General Configuration
      - PORT=8080
      - CORS_ORIGIN=*
      - AUTHENTICATION_TYPE=apikey
      - AUTHENTICATION_API_KEY=${EVOLUTION_API_KEY:-your-api-key}
      - AUTHENTICATION_EXPOSE_IN_FETCH_INSTANCES=false
      - DEVICE_NAME=Evolution API
      - LOG_LEVEL=${LOG_LEVEL:-ERROR}
      - WEBHOOK_GLOBAL_URL=${WEBHOOK_GLOBAL_URL:-""}
      - WEBHOOK_GLOBAL_ENABLED=${WEBHOOK_GLOBAL_ENABLED:-false}
      
      # Database Configuration - Using Supabase PostgreSQL with Separate Schema
      - DATABASE_ENABLED=true
      - DATABASE_PROVIDER=postgresql
      # Use the 'evolution' schema to avoid conflicts with Supabase tables
      - DATABASE_CONNECTION_URI=postgresql://postgres:${POSTGRES_PASSWORD}@db:5432/postgres?schema=evolution
      - DATABASE_SSL=false
      
      # Redis Configuration
      - CACHE_REDIS_ENABLED=${CACHE_REDIS_ENABLED:-true}
      - CACHE_REDIS_URI=redis://redis:6379
      - CACHE_REDIS_PREFIX_KEY=${CACHE_REDIS_PREFIX_KEY:-evolution}
      - CACHE_REDIS_TTL=${CACHE_REDIS_TTL:-604800}
      - CACHE_REDIS_SAVE_INSTANCES=${CACHE_REDIS_SAVE_INSTANCES:-true}
    volumes:
      - evolution_instances:/evolution/instances
      - evolution_store:/evolution/store
    depends_on:
      redis:
        condition: service_healthy